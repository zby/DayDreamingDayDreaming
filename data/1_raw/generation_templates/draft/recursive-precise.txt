# Concept Link Generation — recursive-precise (decision-tree enforced)

**Role:** Interdisciplinary mechanism designer  
**Your task:** Given the concept list below, produce a *single* structured response with:
1) **Pair Explorer** stubs and selections,  
2) **Selected Links** with explicit mechanism details and micro-tests,  
3) an optional **Recursive Round** when a novel capability appears,  
4) **Universal Patterns** (cross-domain synthesis), and  
5) a concise **Gate Report** summarizing coverage, quality, and issues.

---

## Inputs (concept list)
{% for concept in concepts %}
**{{ concept.name }}**  
{{ concept.content }}
---
{% endfor %}

**Production budget & diversity:** Explore ≤ **6** unordered pairs; output **6–8** final links; cover **≥3 link types** and **≥3 distinct roles** across finals.

---

## Link-type decision tree (choose smallest sufficient type)

1. **Feature Graft / Capability Transfer**  
   - **Rule:** Only A contributes an operator/guardrail inserted into B.  
   - **Evidence required:** `operator_A = … ; operator_B = —`.  
   - If only one operator is named, this is **always** a graft.

2. **Mechanism Composition**  
   - **Rule:** A and B both provide operators that are explicitly combined (cascade/gate/pipeline).  
   - **Evidence required:** `operator_A = … ; operator_B = … ; compose = …`.  
   - If operator_B is missing, **downgrade to graft**.

3. **Constraint→Objective Import**  
   - **Rule:** A’s constraint becomes B’s explicit objective/metric.  
   - **Evidence required:** `constraint_from_A → new objective/metric in B`.

4. **Reframing / Problem Translation**  
   - **Rule:** Problem is re-expressed in new terms without new operators or metrics.  
   - **Evidence required:** `old frame → new frame`.

5. **Structure-Preserving Analogy**  
   - **Rule:** States/operators are mapped between A and B with ≥1 invariant preserved.  
   - **Evidence required:** `invariant_preserved = …`.

**Parsimony rule:** If multiple types could apply, choose the lowest valid type in the above order. Never invent operators or invariants just to justify a higher type.

---

## Output format (print exactly this structure)

### A) Pair Explorer

For each unordered pair **{A, B}** (choose up to 6 diverse pairs):

* **Pair i:** `{A, B}`
* **Option Slate (≤4 stubs, one line each):**
  `ID [i-k] · Type & Direction (A→B or B→A) · New (operator|state|signal|guardrail) · Lever`
* **Score & Select:** Impact · Tractability · Clarity · Novelty (1–5 each) → **Winners:** `[i-k, …]` (1–2)
* **Why not the others (≤1 line each):** specific weakness per non-winner.

### B) Selected Links (expand winners only; one block per winner)

**Link g:** `A → B`

* **Type:** (from decision tree)  
* **Type justification (one line):** `operator_A = … ; operator_B = … ; compose|graft|import|reframe|invariant = …`  
* **Roles:** `A(role=…) → B(role=…)`  
* **Mechanism (≤90 words):** *Because A has **\[lever]**, apply **\[operator]** in B to move **\[state variables]** via **\[control signal/feedback]**, yielding **\[effect + payoff metric]**.*  
* **State / Signals:** `state = {s1, s2, …} · signals = {input, feedback, stop}`  
* **Guardrails & Failure Modes (≤2 lines):** when to abort / limits.  
* **Micro-test (24–48h):** falsifiable probe + success indicator.  
* **Example (≤2 lines; mark *(hypothetical)* if unsourced).**  
* **One-sentence delta (≤20 words).**

### C) Recursive Round (optional, ≤2 links)

**Trigger:** If any **winning link** introduces a **novel capability** (operator/lever not in original concepts), treat that link as a **virtual concept** `V = {operator, lever}`.  
**How to choose partners:** Pair `V` with 1–2 original concepts that are unused (not yet appearing in Selected Links).  
**Constraint:** Keep only recursive links that add a **new control signal or guardrail**.  
**Format:** same as “Selected Links,” and tag header with **(Recursive)**.

### D) Universal Patterns (≤3)

* **Pattern name —** concise principle across ≥2 links, stated in domain-neutral language, with the shared **operator/feedback/guardrail** highlighted.

### E) Gate Report (concise, nuanced)

* **Coverage:** Types used = `[ … ]` | Roles used = `[ … ]` | **Gaps:** brief notes.  
* **Quality:** Novel mechanisms present? **\[y/n + 1 line]** · Clear micro-tests? **\[y/n + 1 line]** · Distinct payoffs? **\[y/n + IDs if overlapping]**  
* **Issues:** Potential duplicates (**IDs**), unclear variables (**IDs**), missing guardrails (**IDs**).  
* **Action:** *Drop or rewrite IDs:* `[…]`.  

---

## Rubric to apply while writing (do not print verbosely)

* **Impact:** size of effect if true.  
* **Tractability:** micro-test doable in ≤48h.  
* **Clarity:** explicit operator/variables/signals/stop rule.  
* **Novelty:** mechanism-level difference vs other options in this run.
