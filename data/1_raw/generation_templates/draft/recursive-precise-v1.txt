# Concept Link Generation — recursive-precise-v1 (decision-tree + sanity checks)

**Role:** Interdisciplinary mechanism designer  
**Your task:** Given the concept list below, produce a *single* structured response with:
1) **Pair Explorer** stubs and selections,  
2) **Selected Links** with explicit mechanism details and micro-tests,  
3) an optional **Recursive Round** when a novel capability appears,  
4) **Universal Patterns** (cross-domain synthesis), and  
5) a concise **Gate Report** with a Validator sanity check.

---

## Inputs (concept list)
{% for concept in concepts %}
**{{ concept.name }}**  
{{ concept.content }}
---
{% endfor %}

**Production budget & diversity:** Explore ≤ **6** unordered pairs; output **6–8** final links; cover **≥3 link types** and **≥3 distinct roles** across finals.

---

## Link-type decision tree (choose *smallest sufficient type*)

1. **Feature Graft / Capability Transfer**  
   - **Rule:** Only A contributes an operator/guardrail inserted into B.  
   - **Evidence:** `operator_A = … ; operator_B = —`.  
   - **Downgrade rule:** If operator_B is missing or vague, *always* label as Graft, even if composition words (cascade, pipeline, amplify) are present.

2. **Mechanism Composition**  
   - **Rule:** A and B both provide operators that are explicitly combined (cascade/gate/pipeline).  
   - **Evidence:** `operator_A = … ; operator_B = … ; compose = …`.  
   - If operator_B is missing, **downgrade to Graft**.

3. **Constraint→Objective Import**  
   - **Rule:** A's constraint becomes B's explicit objective/metric.  
   - **Evidence:** `constraint_from_A → new objective/metric in B`.  
   - **Sanity:** If no measurable metric is introduced, it is *not* Import (downgrade to Reframing).

4. **Reframing / Problem Translation**  
   - **Rule:** Old frame → new frame, with no new operators or objectives.  
   - **Evidence:** `old frame → new frame`.  
   - **Sanity:** If a metric or operator is introduced, relabel as Import or Graft.

5. **Structure-Preserving Analogy**  
   - **Rule:** States/operators are mapped between A and B with ≥1 invariant preserved.  
   - **Evidence:** `invariant_preserved = …`.

**Parsimony rule:** If multiple types could apply, choose the lowest valid type.  
**No backfilling:** Do not invent operators/invariants unless they are explicitly present in source concepts.

---

## Output Format

### 1. **Pair Explorer** 
*Brief stubs for concept pairs under consideration (≤6 pairs):*

**[Concept A] × [Concept B]:** [1-2 sentence potential connection stub]

### 2. **Selected Links**
*Detailed mechanism analysis for final links (6-8 links):*

**Link [N]: [Concept A] → [Concept B] | [Link Type]**
- **Mechanism:** [Explicit description of how A influences B]
- **Evidence:** [Required evidence format based on link type]
- **Micro-test:** [Simple test to verify the mechanism works]
- **Role:** [What role this link plays in the overall system]

### 3. **Recursive Round** *(if applicable)*
*When a novel emergent capability appears:*
- **Novel capability detected:** [Description]
- **Recursive exploration:** [How this capability enables new links]

### 4. **Universal Patterns**
*Cross-domain synthesis (2-3 patterns):*
- **Pattern [N]:** [General principle that emerges across multiple links]
- **Domains:** [Which specific links exemplify this pattern]

### 5. **Gate Report**
*Validation summary:*
- **Link type distribution:** [Count by type, verify ≥3 types]
- **Role diversity:** [Count by role, verify ≥3 roles] 
- **Quality check:** [Any concerns about evidence or mechanisms]
- **Validator sanity check:** [Does the overall set make coherent sense?]